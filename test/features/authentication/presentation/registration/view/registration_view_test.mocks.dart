// Mocks generated by Mockito 5.2.0 from annotations
// in crosscheck/test/features/authentication/presentation/registration/view/registration_view_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:crosscheck/core/error/failure.dart' as _i13;
import 'package:crosscheck/features/authentication/data/models/request/registration_params.dart'
    as _i14;
import 'package:crosscheck/features/authentication/domain/repositories/authentication_repository.dart'
    as _i5;
import 'package:crosscheck/features/authentication/domain/usecases/registration_usecase.dart'
    as _i3;
import 'package:crosscheck/features/authentication/presentation/authentication/bloc/authentication_bloc.dart'
    as _i7;
import 'package:crosscheck/features/authentication/presentation/authentication/bloc/authentication_event.dart'
    as _i9;
import 'package:crosscheck/features/authentication/presentation/authentication/bloc/authentication_state.dart'
    as _i2;
import 'package:crosscheck/features/authentication/presentation/registration/bloc/registration_bloc.dart'
    as _i11;
import 'package:crosscheck/features/authentication/presentation/registration/bloc/registration_event.dart'
    as _i12;
import 'package:crosscheck/features/authentication/presentation/registration/bloc/registration_state.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i6;
import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAuthenticationState_0 extends _i1.Fake
    implements _i2.AuthenticationState {}

class _FakeRegistrationUsecase_1 extends _i1.Fake
    implements _i3.RegistrationUsecase {}

class _FakeRegistrationState_2 extends _i1.Fake
    implements _i4.RegistrationState {}

class _FakeAuthenticationRepository_3 extends _i1.Fake
    implements _i5.AuthenticationRepository {}

class _FakeEither_4<L, R> extends _i1.Fake implements _i6.Either<L, R> {}

/// A class which mocks [AuthenticationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationBloc extends _i1.Mock
    implements _i7.AuthenticationBloc {
  MockAuthenticationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeAuthenticationState_0()) as _i2.AuthenticationState);
  @override
  _i8.Stream<_i2.AuthenticationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.AuthenticationState>.empty())
          as _i8.Stream<_i2.AuthenticationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i9.AuthenticationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i9.AuthenticationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i2.AuthenticationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i9.AuthenticationEvent>(
          _i10.EventHandler<E, _i2.AuthenticationState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i9.AuthenticationEvent, _i2.AuthenticationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onChange(_i10.Change<_i2.AuthenticationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [RegistrationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegistrationBloc extends _i1.Mock implements _i11.RegistrationBloc {
  MockRegistrationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RegistrationUsecase get registrationUsecase => (super.noSuchMethod(
      Invocation.getter(#registrationUsecase),
      returnValue: _FakeRegistrationUsecase_1()) as _i3.RegistrationUsecase);
  @override
  _i4.RegistrationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeRegistrationState_2()) as _i4.RegistrationState);
  @override
  _i8.Stream<_i4.RegistrationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.RegistrationState>.empty())
          as _i8.Stream<_i4.RegistrationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i12.RegistrationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i12.RegistrationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i4.RegistrationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i12.RegistrationEvent>(
          _i10.EventHandler<E, _i4.RegistrationState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i12.RegistrationEvent, _i4.RegistrationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onChange(_i10.Change<_i4.RegistrationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [RegistrationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegistrationUsecase extends _i1.Mock
    implements _i3.RegistrationUsecase {
  MockRegistrationUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthenticationRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeAuthenticationRepository_3())
          as _i5.AuthenticationRepository);
  @override
  _i8.Future<_i6.Either<_i13.Failure, void>> call(
          _i14.RegistrationParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i6.Either<_i13.Failure, void>>.value(
                  _FakeEither_4<_i13.Failure, void>()))
          as _i8.Future<_i6.Either<_i13.Failure, void>>);
  @override
  List<Map<String, dynamic>> getFieldValidation(
          _i14.RegistrationParams? params) =>
      (super.noSuchMethod(Invocation.method(#getFieldValidation, [params]),
          returnValue: <Map<String, dynamic>>[]) as List<Map<String, dynamic>>);
}
