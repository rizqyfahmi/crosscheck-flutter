// Mocks generated by Mockito 5.2.0 from annotations
// in crosscheck/test/features/authentication/presentation/registration/view/registration_view_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:crosscheck/features/authentication/domain/usecases/registration_usecase.dart'
    as _i3;
import 'package:crosscheck/features/authentication/presentation/authentication/view_models/authentication_bloc.dart'
    as _i5;
import 'package:crosscheck/features/authentication/presentation/authentication/view_models/authentication_event.dart'
    as _i7;
import 'package:crosscheck/features/authentication/presentation/authentication/view_models/authentication_state.dart'
    as _i2;
import 'package:crosscheck/features/authentication/presentation/registration/view_models/registration_bloc.dart'
    as _i9;
import 'package:crosscheck/features/authentication/presentation/registration/view_models/registration_event.dart'
    as _i10;
import 'package:crosscheck/features/authentication/presentation/registration/view_models/registration_state.dart'
    as _i4;
import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAuthenticationState_0 extends _i1.Fake
    implements _i2.AuthenticationState {}

class _FakeRegistrationUsecase_1 extends _i1.Fake
    implements _i3.RegistrationUsecase {}

class _FakeRegistrationState_2 extends _i1.Fake
    implements _i4.RegistrationState {}

/// A class which mocks [AuthenticationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationBloc extends _i1.Mock
    implements _i5.AuthenticationBloc {
  MockAuthenticationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeAuthenticationState_0()) as _i2.AuthenticationState);
  @override
  _i6.Stream<_i2.AuthenticationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.AuthenticationState>.empty())
          as _i6.Stream<_i2.AuthenticationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i7.AuthenticationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i7.AuthenticationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i2.AuthenticationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i7.AuthenticationEvent>(
          _i8.EventHandler<E, _i2.AuthenticationState>? handler,
          {_i8.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i8.Transition<_i7.AuthenticationEvent, _i2.AuthenticationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void onChange(_i8.Change<_i2.AuthenticationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [RegistrationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegistrationBloc extends _i1.Mock implements _i9.RegistrationBloc {
  MockRegistrationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RegistrationUsecase get registrationUsecase => (super.noSuchMethod(
      Invocation.getter(#registrationUsecase),
      returnValue: _FakeRegistrationUsecase_1()) as _i3.RegistrationUsecase);
  @override
  _i4.RegistrationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeRegistrationState_2()) as _i4.RegistrationState);
  @override
  _i6.Stream<_i4.RegistrationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.RegistrationState>.empty())
          as _i6.Stream<_i4.RegistrationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i10.RegistrationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i10.RegistrationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i4.RegistrationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i10.RegistrationEvent>(
          _i8.EventHandler<E, _i4.RegistrationState>? handler,
          {_i8.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i8.Transition<_i10.RegistrationEvent, _i4.RegistrationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void onChange(_i8.Change<_i4.RegistrationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
