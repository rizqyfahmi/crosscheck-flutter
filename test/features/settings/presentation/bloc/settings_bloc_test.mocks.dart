// Mocks generated by Mockito 5.2.0 from annotations
// in crosscheck/test/features/settings/presentation/bloc/settings_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:crosscheck/core/error/failure.dart' as _i6;
import 'package:crosscheck/core/param/param.dart' as _i10;
import 'package:crosscheck/features/settings/data/models/params/settings_params.dart'
    as _i7;
import 'package:crosscheck/features/settings/domain/entities/settings_entity.dart'
    as _i9;
import 'package:crosscheck/features/settings/domain/repositories/settings_repository.dart'
    as _i2;
import 'package:crosscheck/features/settings/domain/usecase/get_theme_usecase.dart'
    as _i8;
import 'package:crosscheck/features/settings/domain/usecase/set_theme_usecase.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSettingsRepository_0 extends _i1.Fake
    implements _i2.SettingsRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [SetThemeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetThemeUsecase extends _i1.Mock implements _i4.SetThemeUsecase {
  MockSetThemeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SettingsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeSettingsRepository_0()) as _i2.SettingsRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i7.SettingsParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, void>>.value(
                  _FakeEither_1<_i6.Failure, void>()))
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [GetThemeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetThemeUsecase extends _i1.Mock implements _i8.GetThemeUsecase {
  MockGetThemeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SettingsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeSettingsRepository_0()) as _i2.SettingsRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.SettingsEntity>> call(
          _i10.NoParam? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i9.SettingsEntity>>.value(
                      _FakeEither_1<_i6.Failure, _i9.SettingsEntity>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i9.SettingsEntity>>);
}
