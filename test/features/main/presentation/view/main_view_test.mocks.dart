// Mocks generated by Mockito 5.2.0 from annotations
// in crosscheck/test/features/main/presentation/view/main_view_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i12;

import 'package:crosscheck/features/authentication/presentation/authentication/bloc/authentication_bloc.dart'
    as _i11;
import 'package:crosscheck/features/authentication/presentation/authentication/bloc/authentication_event.dart'
    as _i13;
import 'package:crosscheck/features/authentication/presentation/authentication/bloc/authentication_state.dart'
    as _i2;
import 'package:crosscheck/features/dashboard/domain/usecases/get_dashboard_usecase.dart'
    as _i6;
import 'package:crosscheck/features/dashboard/presentation/bloc/dashboard_bloc.dart'
    as _i17;
import 'package:crosscheck/features/dashboard/presentation/bloc/dashboard_event.dart'
    as _i18;
import 'package:crosscheck/features/dashboard/presentation/bloc/dashboard_state.dart'
    as _i7;
import 'package:crosscheck/features/main/domain/usecase/get_active_bottom_navigation_usecase.dart'
    as _i3;
import 'package:crosscheck/features/main/domain/usecase/set_active_bottom_navigation_usecase.dart'
    as _i4;
import 'package:crosscheck/features/main/presentation/bloc/main_bloc.dart'
    as _i15;
import 'package:crosscheck/features/main/presentation/bloc/main_event.dart'
    as _i16;
import 'package:crosscheck/features/main/presentation/bloc/main_state.dart'
    as _i5;
import 'package:crosscheck/features/settings/domain/usecase/get_theme_usecase.dart'
    as _i9;
import 'package:crosscheck/features/settings/domain/usecase/set_theme_usecase.dart'
    as _i8;
import 'package:crosscheck/features/settings/presentation/bloc/settings_bloc.dart'
    as _i19;
import 'package:crosscheck/features/settings/presentation/bloc/settings_event.dart'
    as _i20;
import 'package:crosscheck/features/settings/presentation/bloc/settings_state.dart'
    as _i10;
import 'package:flutter_bloc/flutter_bloc.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAuthenticationState_0 extends _i1.Fake
    implements _i2.AuthenticationState {}

class _FakeGetActiveBottomNavigationUsecase_1 extends _i1.Fake
    implements _i3.GetActiveBottomNavigationUsecase {}

class _FakeSetActiveBottomNavigationUsecase_2 extends _i1.Fake
    implements _i4.SetActiveBottomNavigationUsecase {}

class _FakeMainState_3 extends _i1.Fake implements _i5.MainState {}

class _FakeGetDashboardUsecase_4 extends _i1.Fake
    implements _i6.GetDashboardUsecase {}

class _FakeDashboardState_5 extends _i1.Fake implements _i7.DashboardState {}

class _FakeSetThemeUsecase_6 extends _i1.Fake implements _i8.SetThemeUsecase {}

class _FakeGetThemeUsecase_7 extends _i1.Fake implements _i9.GetThemeUsecase {}

class _FakeSettingsState_8 extends _i1.Fake implements _i10.SettingsState {}

/// A class which mocks [AuthenticationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationBloc extends _i1.Mock
    implements _i11.AuthenticationBloc {
  MockAuthenticationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeAuthenticationState_0()) as _i2.AuthenticationState);
  @override
  _i12.Stream<_i2.AuthenticationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.AuthenticationState>.empty())
          as _i12.Stream<_i2.AuthenticationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i13.AuthenticationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i13.AuthenticationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i2.AuthenticationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i13.AuthenticationEvent>(
          _i14.EventHandler<E, _i2.AuthenticationState>? handler,
          {_i14.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i14.Transition<_i13.AuthenticationEvent, _i2.AuthenticationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  void onChange(_i14.Change<_i2.AuthenticationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [MainBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainBloc extends _i1.Mock implements _i15.MainBloc {
  MockMainBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GetActiveBottomNavigationUsecase get getActiveBottomNavigationUsecase =>
      (super.noSuchMethod(Invocation.getter(#getActiveBottomNavigationUsecase),
              returnValue: _FakeGetActiveBottomNavigationUsecase_1())
          as _i3.GetActiveBottomNavigationUsecase);
  @override
  _i4.SetActiveBottomNavigationUsecase get setActiveBottomNavigationUsecase =>
      (super.noSuchMethod(Invocation.getter(#setActiveBottomNavigationUsecase),
              returnValue: _FakeSetActiveBottomNavigationUsecase_2())
          as _i4.SetActiveBottomNavigationUsecase);
  @override
  _i5.MainState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeMainState_3()) as _i5.MainState);
  @override
  _i12.Stream<_i5.MainState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.MainState>.empty())
          as _i12.Stream<_i5.MainState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i16.MainEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i16.MainEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i5.MainState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i16.MainEvent>(
          _i14.EventHandler<E, _i5.MainState>? handler,
          {_i14.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i14.Transition<_i16.MainEvent, _i5.MainState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  void onChange(_i14.Change<_i5.MainState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [DashboardBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardBloc extends _i1.Mock implements _i17.DashboardBloc {
  MockDashboardBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetDashboardUsecase get getDashboardUsecase => (super.noSuchMethod(
      Invocation.getter(#getDashboardUsecase),
      returnValue: _FakeGetDashboardUsecase_4()) as _i6.GetDashboardUsecase);
  @override
  _i7.DashboardState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeDashboardState_5()) as _i7.DashboardState);
  @override
  _i12.Stream<_i7.DashboardState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i7.DashboardState>.empty())
          as _i12.Stream<_i7.DashboardState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  String getProgress(double? rawProgress) =>
      (super.noSuchMethod(Invocation.method(#getProgress, [rawProgress]),
          returnValue: '') as String);
  @override
  void add(_i18.DashboardEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i18.DashboardEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i7.DashboardState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i18.DashboardEvent>(
          _i14.EventHandler<E, _i7.DashboardState>? handler,
          {_i14.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i14.Transition<_i18.DashboardEvent, _i7.DashboardState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  void onChange(_i14.Change<_i7.DashboardState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [SettingsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsBloc extends _i1.Mock implements _i19.SettingsBloc {
  MockSettingsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.SetThemeUsecase get setThemeUsecase =>
      (super.noSuchMethod(Invocation.getter(#setThemeUsecase),
          returnValue: _FakeSetThemeUsecase_6()) as _i8.SetThemeUsecase);
  @override
  _i9.GetThemeUsecase get getThemeUsecase =>
      (super.noSuchMethod(Invocation.getter(#getThemeUsecase),
          returnValue: _FakeGetThemeUsecase_7()) as _i9.GetThemeUsecase);
  @override
  _i10.SettingsState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeSettingsState_8()) as _i10.SettingsState);
  @override
  _i12.Stream<_i10.SettingsState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.SettingsState>.empty())
          as _i12.Stream<_i10.SettingsState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i20.SettingsEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i20.SettingsEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i10.SettingsState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i20.SettingsEvent>(
          _i14.EventHandler<E, _i10.SettingsState>? handler,
          {_i14.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i14.Transition<_i20.SettingsEvent, _i10.SettingsState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  void onChange(_i14.Change<_i10.SettingsState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
