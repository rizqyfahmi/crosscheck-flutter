// Mocks generated by Mockito 5.2.0 from annotations
// in crosscheck/test/features/main/presentation/bloc/main_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:crosscheck/core/error/failure.dart' as _i6;
import 'package:crosscheck/core/param/param.dart' as _i8;
import 'package:crosscheck/features/main/data/model/bottom_navigation_model.dart'
    as _i10;
import 'package:crosscheck/features/main/domain/entities/bottom_navigation_entity.dart'
    as _i7;
import 'package:crosscheck/features/main/domain/repositories/main_repository.dart'
    as _i2;
import 'package:crosscheck/features/main/domain/usecase/get_active_bottom_navigation_usecase.dart'
    as _i4;
import 'package:crosscheck/features/main/domain/usecase/set_active_bottom_navigation_usecase.dart'
    as _i9;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMainRepository_0 extends _i1.Fake implements _i2.MainRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetActiveBottomNavigationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetActiveBottomNavigationUsecase extends _i1.Mock
    implements _i4.GetActiveBottomNavigationUsecase {
  MockGetActiveBottomNavigationUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MainRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMainRepository_0()) as _i2.MainRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.BottomNavigationEntity>> call(
          _i8.NoParam? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
          returnValue: Future<
                  _i3.Either<_i6.Failure, _i7.BottomNavigationEntity>>.value(
              _FakeEither_1<_i6.Failure, _i7.BottomNavigationEntity>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i7.BottomNavigationEntity>>);
}

/// A class which mocks [SetActiveBottomNavigationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetActiveBottomNavigationUsecase extends _i1.Mock
    implements _i9.SetActiveBottomNavigationUsecase {
  MockSetActiveBottomNavigationUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MainRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMainRepository_0()) as _i2.MainRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.BottomNavigationEntity>> call(
          _i10.BottomNavigationModel? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
          returnValue: Future<
                  _i3.Either<_i6.Failure, _i7.BottomNavigationEntity>>.value(
              _FakeEither_1<_i6.Failure, _i7.BottomNavigationEntity>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i7.BottomNavigationEntity>>);
}
