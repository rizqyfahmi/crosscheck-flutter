// Mocks generated by Mockito 5.2.0 from annotations
// in crosscheck/test/features/dashboard/presentation/view/dashboard_view_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:crosscheck/core/error/failure.dart' as _i11;
import 'package:crosscheck/core/param/param.dart' as _i15;
import 'package:crosscheck/features/authentication/presentation/authentication/bloc/authentication_bloc.dart'
    as _i6;
import 'package:crosscheck/features/authentication/presentation/authentication/bloc/authentication_event.dart'
    as _i8;
import 'package:crosscheck/features/authentication/presentation/authentication/bloc/authentication_state.dart'
    as _i2;
import 'package:crosscheck/features/dashboard/data/models/params/dashboard_params.dart'
    as _i18;
import 'package:crosscheck/features/dashboard/domain/entities/dashboard_entity.dart'
    as _i17;
import 'package:crosscheck/features/dashboard/domain/repositories/dashboard_repository.dart'
    as _i5;
import 'package:crosscheck/features/dashboard/domain/usecases/get_dashboard_usecase.dart'
    as _i16;
import 'package:crosscheck/features/main/data/model/bottom_navigation_model.dart'
    as _i13;
import 'package:crosscheck/features/main/domain/entities/bottom_navigation_entity.dart'
    as _i12;
import 'package:crosscheck/features/main/domain/repositories/main_repository.dart'
    as _i3;
import 'package:crosscheck/features/main/domain/usecase/get_active_bottom_navigation_usecase.dart'
    as _i14;
import 'package:crosscheck/features/main/domain/usecase/set_active_bottom_navigation_usecase.dart'
    as _i10;
import 'package:dartz/dartz.dart' as _i4;
import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAuthenticationState_0 extends _i1.Fake
    implements _i2.AuthenticationState {}

class _FakeMainRepository_1 extends _i1.Fake implements _i3.MainRepository {}

class _FakeEither_2<L, R> extends _i1.Fake implements _i4.Either<L, R> {}

class _FakeDashboardRepository_3 extends _i1.Fake
    implements _i5.DashboardRepository {}

/// A class which mocks [AuthenticationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationBloc extends _i1.Mock
    implements _i6.AuthenticationBloc {
  MockAuthenticationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeAuthenticationState_0()) as _i2.AuthenticationState);
  @override
  _i7.Stream<_i2.AuthenticationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.AuthenticationState>.empty())
          as _i7.Stream<_i2.AuthenticationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i8.AuthenticationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i8.AuthenticationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i2.AuthenticationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i8.AuthenticationEvent>(
          _i9.EventHandler<E, _i2.AuthenticationState>? handler,
          {_i9.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i9.Transition<_i8.AuthenticationEvent, _i2.AuthenticationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i7.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  void onChange(_i9.Change<_i2.AuthenticationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [SetActiveBottomNavigationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetActiveBottomNavigationUsecase extends _i1.Mock
    implements _i10.SetActiveBottomNavigationUsecase {
  MockSetActiveBottomNavigationUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MainRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMainRepository_1()) as _i3.MainRepository);
  @override
  _i7.Future<_i4.Either<_i11.Failure, _i12.BottomNavigationEntity>> call(
          _i13.BottomNavigationModel? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
          returnValue: Future<
                  _i4.Either<_i11.Failure, _i12.BottomNavigationEntity>>.value(
              _FakeEither_2<_i11.Failure, _i12.BottomNavigationEntity>())) as _i7
          .Future<_i4.Either<_i11.Failure, _i12.BottomNavigationEntity>>);
}

/// A class which mocks [GetActiveBottomNavigationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetActiveBottomNavigationUsecase extends _i1.Mock
    implements _i14.GetActiveBottomNavigationUsecase {
  MockGetActiveBottomNavigationUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MainRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMainRepository_1()) as _i3.MainRepository);
  @override
  _i7.Future<_i4.Either<_i11.Failure, _i12.BottomNavigationEntity>> call(
          _i15.NoParam? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
              returnValue: Future<
                      _i4.Either<_i11.Failure,
                          _i12.BottomNavigationEntity>>.value(
                  _FakeEither_2<_i11.Failure, _i12.BottomNavigationEntity>()))
          as _i7.Future<_i4.Either<_i11.Failure, _i12.BottomNavigationEntity>>);
}

/// A class which mocks [GetDashboardUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDashboardUsecase extends _i1.Mock
    implements _i16.GetDashboardUsecase {
  MockGetDashboardUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.DashboardRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeDashboardRepository_3()) as _i5.DashboardRepository);
  @override
  _i7.Future<_i4.Either<_i11.Failure, _i17.DashboardEntity>> call(
          _i18.DashboardParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i4.Either<_i11.Failure, _i17.DashboardEntity>>.value(
                      _FakeEither_2<_i11.Failure, _i17.DashboardEntity>()))
          as _i7.Future<_i4.Either<_i11.Failure, _i17.DashboardEntity>>);
}
