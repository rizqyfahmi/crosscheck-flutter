// Mocks generated by Mockito 5.2.0 from annotations
// in crosscheck/test/features/walkthrough/domain/usecases/get_is_skip_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:crosscheck/core/error/failure.dart' as _i5;
import 'package:crosscheck/features/walkthrough/domain/entities/walkthrough_entitiy.dart'
    as _i6;
import 'package:crosscheck/features/walkthrough/domain/repositories/walkthrough_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [WalkthroughRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalkthroughRepository extends _i1.Mock
    implements _i3.WalkthroughRepository {
  MockWalkthroughRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, dynamic>> setIsSkip(bool? isSkip) =>
      (super.noSuchMethod(Invocation.method(#setIsSkip, [isSkip]),
              returnValue: Future<_i2.Either<_i5.Failure, dynamic>>.value(
                  _FakeEither_0<_i5.Failure, dynamic>()))
          as _i4.Future<_i2.Either<_i5.Failure, dynamic>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.WalkthroughEntity>> getIsSkip() =>
      (super.noSuchMethod(Invocation.method(#getIsSkip, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i6.WalkthroughEntity>>.value(
                      _FakeEither_0<_i5.Failure, _i6.WalkthroughEntity>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.WalkthroughEntity>>);
}
