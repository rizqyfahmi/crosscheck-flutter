// Mocks generated by Mockito 5.2.0 from annotations
// in crosscheck/test/features/walkthrough/presentation/view/walkthrough_view_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:crosscheck/features/authentication/domain/usecases/login_usecase.dart'
    as _i2;
import 'package:crosscheck/features/authentication/presentation/login/bloc/login_bloc.dart'
    as _i7;
import 'package:crosscheck/features/authentication/presentation/login/bloc/login_event.dart'
    as _i9;
import 'package:crosscheck/features/authentication/presentation/login/bloc/login_state.dart'
    as _i3;
import 'package:crosscheck/features/walkthrough/domain/usecases/get_is_skip_usecase.dart'
    as _i5;
import 'package:crosscheck/features/walkthrough/domain/usecases/set_is_skip_usecase.dart'
    as _i4;
import 'package:crosscheck/features/walkthrough/presentation/bloc/walkthrough_bloc.dart'
    as _i11;
import 'package:crosscheck/features/walkthrough/presentation/bloc/walkthrough_event.dart'
    as _i12;
import 'package:crosscheck/features/walkthrough/presentation/bloc/walkthrough_state.dart'
    as _i6;
import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLoginUsecase_0 extends _i1.Fake implements _i2.LoginUsecase {}

class _FakeLoginState_1 extends _i1.Fake implements _i3.LoginState {}

class _FakeSetIsSkipUsecase_2 extends _i1.Fake implements _i4.SetIsSkipUsecase {
}

class _FakeGetIsSkipUsecase_3 extends _i1.Fake implements _i5.GetIsSkipUsecase {
}

class _FakeWalkthroughState_4 extends _i1.Fake implements _i6.WalkthroughState {
}

/// A class which mocks [LoginBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginBloc extends _i1.Mock implements _i7.LoginBloc {
  MockLoginBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoginUsecase get loginUsecase =>
      (super.noSuchMethod(Invocation.getter(#loginUsecase),
          returnValue: _FakeLoginUsecase_0()) as _i2.LoginUsecase);
  @override
  _i3.LoginState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeLoginState_1()) as _i3.LoginState);
  @override
  _i8.Stream<_i3.LoginState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.LoginState>.empty())
          as _i8.Stream<_i3.LoginState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i9.LoginEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i9.LoginEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.LoginState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i9.LoginEvent>(
          _i10.EventHandler<E, _i3.LoginState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i9.LoginEvent, _i3.LoginState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onChange(_i10.Change<_i3.LoginState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [WalkthroughBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalkthroughBloc extends _i1.Mock implements _i11.WalkthroughBloc {
  MockWalkthroughBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SetIsSkipUsecase get setIsSkipUsecase =>
      (super.noSuchMethod(Invocation.getter(#setIsSkipUsecase),
          returnValue: _FakeSetIsSkipUsecase_2()) as _i4.SetIsSkipUsecase);
  @override
  _i5.GetIsSkipUsecase get getIsSkipUsecase =>
      (super.noSuchMethod(Invocation.getter(#getIsSkipUsecase),
          returnValue: _FakeGetIsSkipUsecase_3()) as _i5.GetIsSkipUsecase);
  @override
  _i6.WalkthroughState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeWalkthroughState_4()) as _i6.WalkthroughState);
  @override
  _i8.Stream<_i6.WalkthroughState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i6.WalkthroughState>.empty())
          as _i8.Stream<_i6.WalkthroughState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i12.WalkthroughEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i12.WalkthroughEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i6.WalkthroughState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i12.WalkthroughEvent>(
          _i10.EventHandler<E, _i6.WalkthroughState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i12.WalkthroughEvent, _i6.WalkthroughState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onChange(_i10.Change<_i6.WalkthroughState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
