// Mocks generated by Mockito 5.2.0 from annotations
// in crosscheck/test/features/task/data/repositories/task_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:crosscheck/core/network/network_info.dart' as _i9;
import 'package:crosscheck/features/task/data/datasource/task_local_data_source.dart'
    as _i6;
import 'package:crosscheck/features/task/data/datasource/task_remote_data_source.dart'
    as _i4;
import 'package:crosscheck/features/task/data/models/data/monthly_task_model.dart'
    as _i8;
import 'package:crosscheck/features/task/data/models/data/task_model.dart'
    as _i7;
import 'package:crosscheck/features/task/data/models/response/monthly_task_response_model.dart'
    as _i3;
import 'package:crosscheck/features/task/data/models/response/task_response_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTaskResponseModel_0 extends _i1.Fake
    implements _i2.TaskResponseModel {}

class _FakeMonthlyTaskResponseModel_1 extends _i1.Fake
    implements _i3.MonthlyTaskResponseModel {}

/// A class which mocks [TaskRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRemoteDataSource extends _i1.Mock
    implements _i4.TaskRemoteDataSource {
  MockTaskRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.TaskResponseModel> getHistory(
          {String? token, int? limit, int? offset}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getHistory, [], {#token: token, #limit: limit, #offset: offset}),
          returnValue: Future<_i2.TaskResponseModel>.value(
              _FakeTaskResponseModel_0())) as _i5
          .Future<_i2.TaskResponseModel>);
  @override
  _i5.Future<_i3.MonthlyTaskResponseModel> getMonthlyTask(
          {String? token, DateTime? time}) =>
      (super.noSuchMethod(
          Invocation.method(#getMonthlyTask, [], {#token: token, #time: time}),
          returnValue: Future<_i3.MonthlyTaskResponseModel>.value(
              _FakeMonthlyTaskResponseModel_1())) as _i5
          .Future<_i3.MonthlyTaskResponseModel>);
  @override
  _i5.Future<_i2.TaskResponseModel> getTaskByDate(
          {String? token, DateTime? time, int? limit = 10, int? offset = 0}) =>
      (super.noSuchMethod(
              Invocation.method(#getTaskByDate, [],
                  {#token: token, #time: time, #limit: limit, #offset: offset}),
              returnValue: Future<_i2.TaskResponseModel>.value(
                  _FakeTaskResponseModel_0()))
          as _i5.Future<_i2.TaskResponseModel>);
}

/// A class which mocks [TaskLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskLocalDataSource extends _i1.Mock
    implements _i6.TaskLocalDataSource {
  MockTaskLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i7.TaskModel>> getCachedTask() =>
      (super.noSuchMethod(Invocation.method(#getCachedTask, []),
              returnValue: Future<List<_i7.TaskModel>>.value(<_i7.TaskModel>[]))
          as _i5.Future<List<_i7.TaskModel>>);
  @override
  _i5.Future<void> cacheTask(List<_i7.TaskModel>? models) =>
      (super.noSuchMethod(Invocation.method(#cacheTask, [models]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> clearCachedTask() =>
      (super.noSuchMethod(Invocation.method(#clearCachedTask, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> cacheMonthlyTask(List<_i8.MonthlyTaskModel>? models) =>
      (super.noSuchMethod(Invocation.method(#cacheMonthlyTask, [models]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<List<_i8.MonthlyTaskModel>> getCacheMonthlyTask(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#getCacheMonthlyTask, [time]),
              returnValue: Future<List<_i8.MonthlyTaskModel>>.value(
                  <_i8.MonthlyTaskModel>[]))
          as _i5.Future<List<_i8.MonthlyTaskModel>>);
  @override
  _i5.Future<void> clearCachedMonthlyTask() =>
      (super.noSuchMethod(Invocation.method(#clearCachedMonthlyTask, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<List<_i7.TaskModel>> getCachedTaskByDate(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#getCachedTaskByDate, [time]),
              returnValue: Future<List<_i7.TaskModel>>.value(<_i7.TaskModel>[]))
          as _i5.Future<List<_i7.TaskModel>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}
